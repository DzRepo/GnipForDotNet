{"name":"Gnip for .NET","tagline":"C# Projects for working with Gnip / Twitter Data","body":"Gnip for .NET is a solution made up of individual projects that can be used to access and manage data from Gnip APIs.\r\n\r\nSupport for PowerTrack & SearchAPI is complete.\r\nHistorical PowerTrack job management is complete.  Downloading of Historical PowerTrack files is still in development.\r\n\r\nThe projects utilize [JSON.NET](http://www.newtonsoft.com/json) for deserializing into an Activity and associated objects and serializing commands into JSON objects.\r\n\r\n**Projects included in the solution:**\r\n\r\n**Gnip.Powertrack** \r\n\r\n* GnipStreamReader class for establishing persistent connection to PowerTrack stream.\r\n* Rules class & methods for managing rules (Get / Add / Delete)\r\n\r\n**StreamTest**\r\n\r\n* A simple console application demonstrating the proper implementation of the GnipStreamReader class to establish and maintain a connection to PowerTrack.\r\n\r\n**PowerTrack.Net**\r\n\r\n* Windows Forms application demonstrating use of the GnipStreamReader and Rules API classes as well as Historical PowerTrack job management.\r\n\r\n\r\n**Gnip.SearchAPI**\r\n\r\n* Classes used to call create and return data via SearchAPI - both counts and data endpoints.\r\n\r\n**Gnip.Utilities**\r\n\r\n* REST call utility static class used by Rules, Search and HPT RESTful calls.\r\n* JSON classes for Gnip Activity Object.\r\n\r\n\r\n**Gnip.HistoricalPowerTrack**\r\n\r\n* Windows Forms application demonstrating use of Gnip.Powertrack.Historical \r\n\r\nContact [SteveDz](mailto:stevedz@twitter.com) with any questions.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}